<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Laravel on Mauri870&#39;s dev blog</title>
    <link>https://blog.mauri870.com/tags/laravel/</link>
    <description>Recent content in Laravel on Mauri870&#39;s dev blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 06 Mar 2020 09:00:00 -0300</lastBuildDate>
    <atom:link href="https://blog.mauri870.com/tags/laravel/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>O(n^2) Redis memory usage with Laravel Horizon</title>
      <link>https://blog.mauri870.com/posts/on2-redis-memory-usage-with-laravel-horizon/</link>
      <pubDate>Fri, 06 Mar 2020 09:00:00 -0300</pubDate>
      <guid>https://blog.mauri870.com/posts/on2-redis-memory-usage-with-laravel-horizon/</guid>
      <description>&lt;p&gt;O(n^2) again, now with Laravel Horizon memory usage.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using Opentracing/Jaeger with Laravel</title>
      <link>https://blog.mauri870.com/posts/using-opentracing/jaeger-with-laravel/</link>
      <pubDate>Sun, 13 May 2018 22:26:06 -0300</pubDate>
      <guid>https://blog.mauri870.com/posts/using-opentracing/jaeger-with-laravel/</guid>
      <description>&lt;p&gt;Microservices become the new standard for scalable and maintanable arquitectures. Monolithic aplications are splited into smaller pieces to keep things simple and decoupled. Tracing comes in hand when you need to aggregate the events during the request lifecycle between a single or multiple services.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
