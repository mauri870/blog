<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tensorflow Serving on Mauri870&#39;s dev blog</title>
    <link>https://blog.mauri870.com/tags/tensorflow-serving/</link>
    <description>Recent content in Tensorflow Serving on Mauri870&#39;s dev blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 03 Nov 2020 07:45:14 -0300</lastBuildDate>
    <atom:link href="https://blog.mauri870.com/tags/tensorflow-serving/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AMD 2.0</title>
      <link>https://blog.mauri870.com/posts/amd2-improvements/</link>
      <pubDate>Tue, 03 Nov 2020 07:45:14 -0300</pubDate>
      <guid>https://blog.mauri870.com/posts/amd2-improvements/</guid>
      <description>&lt;p&gt;We finished the full rollout of a new version of our AMD project, let&amp;rsquo;s find out the improvements made alongside some implementation notes!&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to export the CIFAR10 model to Tensorflow Serving</title>
      <link>https://blog.mauri870.com/posts/exporting-cifar10-to-tensorflow-serving/</link>
      <pubDate>Mon, 21 May 2018 23:26:10 -0300</pubDate>
      <guid>https://blog.mauri870.com/posts/exporting-cifar10-to-tensorflow-serving/</guid>
      <description>&lt;p&gt;The CIFAR-10 dataset consists of 60000 32x32 colour images in 10 classes, with 6000 images per class. In this blog post I&amp;rsquo;ll cover how to export a trained CIFAR-10 tensorflow model to Tensorflow Serving.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Writing a Golang client for the Tensorflow Serving Inception model</title>
      <link>https://blog.mauri870.com/posts/tensorflow-serving-inception-go/</link>
      <pubDate>Sat, 19 May 2018 12:35:00 -0300</pubDate>
      <guid>https://blog.mauri870.com/posts/tensorflow-serving-inception-go/</guid>
      <description>&lt;p&gt;Tensorflow Serving is the most optimized way to serve a Tensorflow machine learning model in production. The official tutorials only cover the python client, so lets implement a Go/Golang one.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
